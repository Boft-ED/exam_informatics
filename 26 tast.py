# на память 
# 8460
a = [int(x) for x in open('27884.txt')]
a.sort()
size = 8460
i = 0
storage = []
while i < len(a):
    storage.append(a[i])
    if sum(storage) > size:
        storage.pop()
        break
    i += 1
print(i)

while i < len(a):
    storage.pop()
    storage.append(a[i])
    if sum(storage) > size:
        storage.pop()
        storage.append(a[i-1])
        break
    i += 1
print(sum(storage))

# Продавец предоставляет покупателю, делающему большую закупку, скидку по следующим правилам:
#— на каждый второй товар стоимостью больше 50 рублей предоставляется скидка 25%;
#— общая стоимость покупки со скидкой округляется вверх до целого числа рублей;
#— порядок товаров в списке определяет продавец и делает это так, чтобы общая сумма скидки была наименьшей.
#По известной стоимости каждого товара в покупке необходимо определить общую стоимость покупки с учётом #скидки и стоимость самого дорогого товара, на который будет предоставлена скидка.
#Входные данные.
#Первая строка входного файла содержит число N — общее количество купленных товаров. Каждая из следующих N строк содержит одно целое число — стоимость товара в рублях.
#В ответе запишите два целых числа: сначала общую стоимость покупки с учётом скидки, затем стоимость самого дорогого товара, на который будет предоставлена скидка.
#Пример входного файла:

a = [int(x) for x in open('inf_22_10_20_26.txt')]
a.sort()
not_sale = []
sale = [] 
i = 0

while a[0] <= 50:
    not_sale.append(a[0])
    a.remove(a[0])

while i < len(a)//2:
    sale.append(a[i])
    a[i] *= 0.75 # меняется
    i += 1
print(sum(a)+sum(not_sale),max(sale))


# на память запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.

a = [int(x) for x in open('26_demo.txt')]
a.sort()
size = 8200
i = 0
storage = []
while i < len(a):
    storage.append(a[i])
    if sum(storage) > size:
        storage.pop()
        break
    i += 1
print(i)

while i < len(a):
    storage.pop()
    storage.append(a[i])
    if sum(storage) > size:
        storage.pop()
        storage.append(a[i-1])
        break
    i += 1
print(max(storage))